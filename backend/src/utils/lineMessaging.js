import axios from 'axios';
import dotenv from 'dotenv';

dotenv.config();

const LINE_CHANNEL_ACCESS_TOKEN = process.env.LINE_CHANNEL_ACCESS_TOKEN;
const LINE_MESSAGING_API = 'https://api.line.me/v2/bot/message/push';

/**
 * ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡πà‡∏≤‡∏ô LINE Messaging API
 * @param {string} userId - LINE User ID ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
 * @param {Array} messages - ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á (‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö LINE Message Objects)
 * @returns {Promise<Object>} - ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
 */
export const sendLineMessage = async (userId, messages) => {
    try {
        if (!LINE_CHANNEL_ACCESS_TOKEN) {
            console.warn('LINE_CHANNEL_ACCESS_TOKEN is not set in environment variables');
            return { success: false, error: 'LINE_CHANNEL_ACCESS_TOKEN is not set' };
        }

        const response = await axios.post(
            LINE_MESSAGING_API,
            {
                to: userId,
                messages: messages
            },
            {
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${LINE_CHANNEL_ACCESS_TOKEN}`
                }
            }
        );

        return { success: true, data: response.data };
    } catch (error) {
        console.error('LINE Messaging API Error:', error.response?.data || error.message);
        return { success: false, error: error.response?.data || error.message };
    }
};

/**
 * ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏° LINE
 * @param {string} groupId - LINE Group ID
 * @param {string} message - ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á
 * @returns {Promise<Object>} - ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
 */
export const sendLineGroupMessage = async (groupId, message) => {
    const messages = [
        {
            type: 'text',
            text: message
        }
    ];

    return await sendLineMessage(groupId, messages);
};

/**
 * ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ç‡∏≠‡∏á‡∏≠‡∏≠‡∏Å
 * @param {Object} checkout - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ç‡∏≠‡∏á‡∏≠‡∏≠‡∏Å
 * @param {Object} job - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô
 * @param {Object} user - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
 * @param {Array} items - ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡πà‡∏á‡∏Ç‡∏≠‡∏á
 * @returns {string} - ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
 */
export const createCheckoutNotificationMessage = (checkout, job, user, items) => {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    let message = `\nüîî ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ç‡∏≠‡∏á‡∏≠‡∏≠‡∏Å\n\n`;
    message += `üìã ‡∏á‡∏≤‡∏ô: ${job.title}\n`;
    message += `üë§ ‡πÇ‡∏î‡∏¢: ${user.name}\n`;
    message += `‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: ${formatDateTime(checkout.createdAt)}\n\n`;

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡πà‡∏á‡∏Ç‡∏≠‡∏á
    message += `üì¶ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡πà‡∏á‡∏Ç‡∏≠‡∏á:\n`;

    items.forEach((item, index) => {
        const plannedQty = item.quantity;
        const actualQty = item.actualQuantity;
        const isComplete = plannedQty === actualQty;
        const statusSymbol = isComplete ? '‚úÖ' : '‚ùå';

        message += `${index + 1}. ${item.item.name} ${plannedQty}/${actualQty} ${statusSymbol}\n`;
    });

    return message;
};

/**
 * ‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤
 * @param {string|Date} dateTime - ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤
 * @returns {string} - ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï‡πÅ‡∏•‡πâ‡∏ß
 */
const formatDateTime = (dateTime) => {
    const date = new Date(dateTime);

    const day = date.getDate().toString().padStart(2, '0');
    const month = (date.getMonth() + 1).toString().padStart(2, '0');
    const year = date.getFullYear();

    const hours = date.getHours().toString().padStart(2, '0');
    const minutes = date.getMinutes().toString().padStart(2, '0');

    return `${day}/${month}/${year} ${hours}:${minutes}`;
};

/**
 *  Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ç‡∏≠‡∏á‡∏≠‡∏≠‡∏Å
 * @param {Object} checkout - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ç‡∏≠‡∏á‡∏≠‡∏≠‡∏Å
 * @param {Object} job - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô
 * @param {Object} user - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
 * @param {Array} items - ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡πà‡∏á‡∏Ç‡∏≠‡∏á
 * @returns {Object} - Flex Message Object
 */
export const createCheckoutFlexMessage = (checkout, job, user, items) => {
    const itemContents = items.map((item, index) => {
        const plannedQty = item.quantity;
        const actualQty = item.actualQuantity;
        const isComplete = plannedQty === actualQty;
        const statusEmoji = isComplete ? '‚úÖ' : '‚ùå';

        return {
            type: 'box',
            layout: 'horizontal',
            contents: [
                {
                    type: 'text',
                    text: `${index + 1}. ${item.item.name}`,
                    size: 'sm',
                    color: '#555555',
                    flex: 5
                },
                {
                    type: 'text',
                    text: `${plannedQty}/${actualQty}`,
                    size: 'sm',
                    color: '#111111',
                    align: 'end',
                    flex: 2
                },
                {
                    type: 'text',
                    text: statusEmoji,
                    size: 'sm',
                    align: 'end',
                    flex: 1
                }
            ]
        };
    });

    //  Flex Message
    return {
        type: 'flex',
        altText: `‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ç‡∏≠‡∏á‡∏≠‡∏≠‡∏Å: ${job.title}`,
        contents: {
            type: 'bubble',
            header: {
                type: 'box',
                layout: 'vertical',
                contents: [
                    {
                        type: 'text',
                        text: 'üîî ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ç‡∏≠‡∏á‡∏≠‡∏≠‡∏Å',
                        weight: 'bold',
                        size: 'lg',
                        color: '#ffffff'
                    }
                ],
                backgroundColor: '#0367D3'
            },
            body: {
                type: 'box',
                layout: 'vertical',
                contents: [
                    {
                        type: 'box',
                        layout: 'vertical',
                        margin: 'lg',
                        spacing: 'sm',
                        contents: [
                            {
                                type: 'box',
                                layout: 'horizontal',
                                contents: [
                                    {
                                        type: 'text',
                                        text: 'üìã ‡∏á‡∏≤‡∏ô:',
                                        size: 'sm',
                                        color: '#555555',
                                        flex: 1
                                    },
                                    {
                                        type: 'text',
                                        text: job.title,
                                        size: 'sm',
                                        color: '#111111',
                                        flex: 4
                                    }
                                ]
                            },
                            {
                                type: 'box',
                                layout: 'horizontal',
                                contents: [
                                    {
                                        type: 'text',
                                        text: 'üë§ ‡πÇ‡∏î‡∏¢:',
                                        size: 'sm',
                                        color: '#555555',
                                        flex: 1
                                    },
                                    {
                                        type: 'text',
                                        text: user.name,
                                        size: 'sm',
                                        color: '#111111',
                                        flex: 4
                                    }
                                ]
                            },
                            {
                                type: 'box',
                                layout: 'horizontal',
                                contents: [
                                    {
                                        type: 'text',
                                        text: '‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤:',
                                        size: 'sm',
                                        color: '#555555',
                                        flex: 1
                                    },
                                    {
                                        type: 'text',
                                        text: formatDateTime(checkout.createdAt),
                                        size: 'sm',
                                        color: '#111111',
                                        flex: 4
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        type: 'separator',
                        margin: 'lg'
                    },
                    {
                        type: 'text',
                        text: 'üì¶ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡πà‡∏á‡∏Ç‡∏≠‡∏á:',
                        weight: 'bold',
                        size: 'md',
                        margin: 'lg'
                    },
                    {
                        type: 'box',
                        layout: 'vertical',
                        margin: 'lg',
                        spacing: 'sm',
                        contents: itemContents
                    }
                ]
            },
            footer: {
                type: 'box',
                layout: 'vertical',
                spacing: 'sm',
                contents: [
                    {
                        type: 'button',
                        style: 'primary',
                        action: {
                            type: 'uri',
                            label: '‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°',
                            uri: `${process.env.FRONTEND_URL}/jobs/${job.id}`
                        }
                    }
                ]
            }
        }
    };
}; 